"06.02.24===============================Exceptions==============================="
# exceptions - исключения, объекты, которые прирывают работу кода, если они не обработаны
'1----------------------------------------------'
'SyntaxError'
"a = "
# исключения, которые выходят когда в коде запущена синтаксическая ошибка
'2----------------------------------------------'
'NameError'
'print(name)' 
# исключение, которое выходит когда мы обращаемся к несуществующей переменной
'3----------------------------------------------'
'IndexError'
'''
list_ = [1,2,3,4]
print(9) # or list_.pop(10000)
'''
# исключение, которое выходит при обращении к несуществующему индексу
'4----------------------------------------------'
'KeyError'
'''
dict_ = {'a': 1, 'b': 2, 'd': 3}
print(dict_['c'])'''

# исключение, которое выходит при обращении к несуществующему ключу
'5----------------------------------------------'
'ValueError'
# когда мы передаём в функцию не корректный для неё ТД
'''
int('10d')
'''
# когда мы распаковываем итерируемый объект на несколько переменных и кол-во переменых не совпадает с кол-вом значений
'''
a, b, c = [1, 2]
'''
'6----------------------------------------------'
'TypeError'
# когда мы пытаемся использовать методы не свойственные какому-то ТД
# когда мы пытаемся передать в функцию больше или меньше аргументов, чем принимает функция
'''
for i in 1234:
    ...
'''

'''
5 + '5' 
'''

'''
{[1,2,3]: 'a'} # в словари если ключ является измен ТД
'''
'7----------------------------------------------'
'ZeroDivisionError'
# когда мы делим на ноль
'''
45/0 | 100 / 0 | 3 % 0
'''
'8----------------------------------------------'
'AttributeError'
# исключение, которое выходит при обращении к несуществующему аттрибуту или методу объект (ТП)
'''
[1, 2, 3].replace(1, 5)
'''
'9----------------------------------------------'
'IndentationError'
# исключение, которое выходит когда мы неправильно используем отступ / у нас ошибки с пробелами или табуляциями
'''
     a = 5
'''
'''
for i in range(10):
print(i)
'''
'10----------------------------------------------'
'Exception'
# исключение, которое создали, чтобы его вызывать / все исключения

"06.02.24===============================Вызов исключений==============================="
# raise NameError('Я вызвал name_error')

"06.02.24===============================Try except==============================="

# try: # конструкцию try используют если разработчик не уверен или зная что в коде есть ошибка, и хочет обработать её в except
#     num = int(input('Введите число: '))
# except ValueError: # конструкция except нужна для обраоботки исключений. В данном случае исключение ValueError 
#     print('Введите число, а не символ')
# else: # else сработает когда except не сработает, когда не вышли ошибки, исключения
#     print(f'Вы ввели число {num}')
# finally: # всегда работает
#     print('До свидания')

# try: 
#     print(number)
# except ValueError:
#     print('Нет такой переменной')


# try:
#     raise Exception
# except Exception: # отлавливаютя все ошибки
#     print('Отловленна любая ошибка')

# try + finally  / else работает когда есть except

''' T 9: Запросите у пользователя сумму cash которая у него сейчас есть в бумажнике.
Если он введёт сумму, меньшую чем 0, то выбросите исключение ValueError с текстом:
Сумма не может быть отрицательной! 
иначе распечатайте сумму.'''

# try:
#     cash = int(input())
#     if cash < 0:
#         raise Exception ('ValueError')
#         print(cash)
# except:
#     print('Сумма не может быть отрицательной!')
# else:
#     print(cash) 

# try:
#     cash = int(input())
#     if cash < 0:
#         raise ValueError('Сумма не может быть отрицательной!')
# except ValueError as e:
#     print(e)
# else:
#     print(cash)
    
# list_ = [1, 2, 3]
# try:
#     print(list_.get(1))
# except AttributeError:
#     print('Такого элемента нет') 

# password = 'stkasD'
# try:
#     if len(password) > 6:
#         print(password)
# except ValueError:
#     print('Пароль должен быть не менее 6 символов')

a = 1, 'hu', 234
print(type(a))